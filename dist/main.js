(()=>{"use strict";var n={426:(n,e,t)=>{t.d(e,{Z:()=>d});var r=t(537),o=t.n(r),a=t(645),i=t.n(a)()(o());i.push([n.id,"body {\n    margin: 0;\n    padding: 0;\n    display: grid;\n    grid-template-columns: 250px 1fr;\n    grid-template-rows: 120px 1fr 50px;\n    height: 100vh;\n    position:relative;\n\n}\n\nh2, h3 {\n    padding: 0;\n    margin: 0;\n}\n\nul {\n    list-style-type: none;\n    padding: 0;\n}\n\nli {\n    padding: 0;\n    margin: 0;\n}\n\nheader {\n    /* height: 120px; */\n    background-color: #323639;\n    width: 100%;\n    display: flex;\n    align-items: center;\n    grid-column-start: 1;\n    grid-column-end: 3;\n  \n    \n}\n\n\nheader h1 {\n    margin-left: 3rem;\n    color: white;\n}\n\n\n.taskBar {\n    grid-column-start: 1;\n    grid-column-end: 2;\n    grid-row-start: 2;\n    grid-row-end: 3;\n    background-color: #d1cfcf;\n    \n}\n\n\n.taskBarTop {\n    display: flex;\n    flex-direction: column;\n    border: 2px solid black;\n    \n}\n\n\n\n.taskBarContents {\n    display: flex;\n    /* border: 2px solid black; */\n    padding: 0.3rem;\n    gap: 0.5rem;\n    margin: 0.5rem;\n}\n\n.taskBarContents > * {\n    pointer-events: none;\n    \n}\n\n.taskBarContents:hover{\n    background-color: pink;\n}\n\n\n.activeProject {\n    background-color:pink;\n}\n\n\n\n.projects {\n    grid-column-start: 1;\n    grid-column-end: 2;\n    border: 2px solid black;\n\n\n    \n}\n\n.projectsNavProject {\n    display: grid;\n    grid-template-columns: 215px 1fr;\n}\n\n.projectsNavProject:hover {\n    background-color: pink;\n}\n\n.projectsNavProjectContent {\n    grid-column-start: 1;\n    grid-column-end: 2;\n}\n\n.projectsNavProjectEdit {\n    grid-column-start: 2;\n    grid-column-end: 3;\n    text-align: center;\n    display: flex;\n    justify-content: center;\n    align-self: center;\n    border: 2px solid black;\n    position: relative;\n \n}\n\n/* .projectsNavProjectEdit > * {\n    pointer-events: none;\n} */\n\n\n.projectsNavProjectEdit:hover {\n    background-color: white;\n}\n\n.projectMenu {\n    position: absolute;\n    display: none;\n    height: 100px;\n    width: 150px;\n    background-color: #c9c8c7;\n    border: 1px solid black;\n    top: 25px;\n    padding: 0px;\n    z-index: 1;\n}\n\n.projectMenuImg {\n    pointer-events: none;\n}\n\n.projectMenuChildren {\n    display: flex;\n    padding-left: 0.5rem;\n    padding-right: 0.5rem;\n    padding-top: 0px;\n    padding-bottom: 0px;\n    justify-content: space-between;\n    \n  \n}\n\n.projectMenuChildren > * {\n    pointer-events: none;\n}\n\n.projectMenuChildren:hover {\n    background-color: white;\n}\n\n.projectMenuChildrenImg {\n    align-self: center;\n}\n\n\n\n.projectsContent {\n    display: flex;\n    border: 2px solid black;\n    padding: 0.3rem;\n    gap: 0.5rem;\n    margin: 0.5rem;   \n\n}\n.projectsContent > * {\n    pointer-events: none;\n}\n\n.projects h2 {\n    margin: 1rem;\n    /* border: 1px solid red; */\n\n\n}\n\n.taskView {\n    grid-column-start: 2;\n    grid-column-end: 3;\n    grid-row-start: 2;\n    grid-row-end: 3;\n    background-color: #f2f0f0;\n    display: flex;\n    flex-direction: column;\n    gap: 2rem;\n    padding-top: 1rem;\n    padding-left: 2rem;\n}\n\n.tasks {\n    display: flex;\n    flex-direction: column;\n    gap: 1rem;\n\n}\n\n.task {\n    display: grid;\n    grid-template-columns: 50px 1fr;\n\n}\n\n\n.taskComplete {\n    grid-column-start: 1;\n    grid-column-end: 2;\n    grid-row-start: 1;\n    grid-row-end: 2;\n    position: relative;\n    /* background-color: yellow;\n    border: 2px solid red; */\n}\n\n.dot {\n    height: 20px;\n    width: 20px;\n    background-color: none;\n    border-radius: 50%;\n    border: 2px solid black;\n    display: inline-block;\n    position: absolute;\n    top: 15%;\n    left: 12.5px;\n   \n}\n\n.taskContent {\n    grid-column-start: 2;\n    grid-column-end: 3;\n\n    display: grid;\n    grid-template-columns:  3fr 1fr;\n    grid-template-rows: 50px 1fr;\n    border-bottom: grey solid 1px;\n}\n\n\n\n.task:hover {\n    background-color: pink;\n\n}\n\n\n\n.taskTitle {\n    grid-column-start: 1;\n    grid-column-end: 2;\n    grid-row-start: 1;\n    grid-row-end: 2;\n    pointer-events: none;\n\n}\n\n.taskDueDate {\n    grid-column-start: 2;\n    grid-column-end: 3;\n    grid-row-start: 1;\n    grid-row-end: 2;\n    pointer-events: none;\n\n}\n\n.taskDescription {\n    grid-column-start: 1;\n    grid-column-end: 3;\n    grid-row-start: 2;\n    grid-row-end: 3;\n    pointer-events: none;\n}\n\n\n.addTask {\n    height: 2rem;\n    display: flex;\n    align-items: center;\n\n}\n\n.addTask:hover {\n    background-color:#696868 ;\n\n}\n\n\n\n\n#addProjectForm {\n    display: none;\n    height:300px;\n    width:300px;\n    position:absolute;\n    top: 20%;\n    left: 50%;\n    margin-left: -150px;\n    background-color: #c9c8c7;\n\n}\n\n.addProjectFormUser {\n    display: flex;\n    flex-direction: column;\n\n}\n\n.addProjectFormUserHeading h2 {\n\n\n}\n\n\n.addProjectFormUserHeading {\n    background-color:#696868;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    height: 3rem;\n    \n}\n\n.addProjectFormUserBody {\n    display: flex;\n    flex-direction: column;\n}\n\n.addProjectFormUserLiTitle {\n    display: flex;\n    flex-direction: column;\n\n}\n\n.addProjectFormUserButtons {\n    margin-top: 100px;\n    align-self: flex-end;\n}\n\n#addTaskForm {\n    display: none;\n    height:500px;\n    width:500px;\n    position:absolute;\n    top: 20%;\n    left: 50%;\n    margin-left: -250px;\n    background-color: #c9c8c7;\n\n}\n\n.addTaskFormUser {\n    display: flex;\n    flex-direction: column;\n\n}\n\n.addTaskFormUserHeading {\n    background-color:#696868;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    height: 3rem;\n    \n}\n\n.addTaskFormUserBody {\n    display: flex;\n    flex-direction: column;\n}\n\n.addTaskFormUserLi {\n    display: flex;\n    flex-direction: column;\n\n}\n\n.addTaskFormUserUl input {\n    background-color: white;\n    border: none;\n    \n}\n\n.addTaskFormUserButtons {\n    \n\n}\n\n\n.flagImgPNG1 {\n    background-color: red;\n}\n.flagImgPNG2 {\n    background-color: orange;\n}\n\n.flagImgPNG3 {\n    background-color: skyblue;\n}\n\n.activePriority {\n    width: 2.5rem;\n    height: 2.5rem;\n\n}\n\n/* .addProjectFormUserHeadingHTwo {\n    text-align: center;\n} */\n\nfooter {\n    background-color: red;\n    grid-row-start: 3;\n    grid-row-end: 4;\n    grid-column-start: 1;\n    grid-column-end: 3;\n}\n\n\n/*\nbackground-color: #ebe7e4;\n*/\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"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",sourcesContent:["body {\n    margin: 0;\n    padding: 0;\n    display: grid;\n    grid-template-columns: 250px 1fr;\n    grid-template-rows: 120px 1fr 50px;\n    height: 100vh;\n    position:relative;\n\n}\n\nh2, h3 {\n    padding: 0;\n    margin: 0;\n}\n\nul {\n    list-style-type: none;\n    padding: 0;\n}\n\nli {\n    padding: 0;\n    margin: 0;\n}\n\nheader {\n    /* height: 120px; */\n    background-color: #323639;\n    width: 100%;\n    display: flex;\n    align-items: center;\n    grid-column-start: 1;\n    grid-column-end: 3;\n  \n    \n}\n\n\nheader h1 {\n    margin-left: 3rem;\n    color: white;\n}\n\n\n.taskBar {\n    grid-column-start: 1;\n    grid-column-end: 2;\n    grid-row-start: 2;\n    grid-row-end: 3;\n    background-color: #d1cfcf;\n    \n}\n\n\n.taskBarTop {\n    display: flex;\n    flex-direction: column;\n    border: 2px solid black;\n    \n}\n\n\n\n.taskBarContents {\n    display: flex;\n    /* border: 2px solid black; */\n    padding: 0.3rem;\n    gap: 0.5rem;\n    margin: 0.5rem;\n}\n\n.taskBarContents > * {\n    pointer-events: none;\n    \n}\n\n.taskBarContents:hover{\n    background-color: pink;\n}\n\n\n.activeProject {\n    background-color:pink;\n}\n\n\n\n.projects {\n    grid-column-start: 1;\n    grid-column-end: 2;\n    border: 2px solid black;\n\n\n    \n}\n\n.projectsNavProject {\n    display: grid;\n    grid-template-columns: 215px 1fr;\n}\n\n.projectsNavProject:hover {\n    background-color: pink;\n}\n\n.projectsNavProjectContent {\n    grid-column-start: 1;\n    grid-column-end: 2;\n}\n\n.projectsNavProjectEdit {\n    grid-column-start: 2;\n    grid-column-end: 3;\n    text-align: center;\n    display: flex;\n    justify-content: center;\n    align-self: center;\n    border: 2px solid black;\n    position: relative;\n \n}\n\n/* .projectsNavProjectEdit > * {\n    pointer-events: none;\n} */\n\n\n.projectsNavProjectEdit:hover {\n    background-color: white;\n}\n\n.projectMenu {\n    position: absolute;\n    display: none;\n    height: 100px;\n    width: 150px;\n    background-color: #c9c8c7;\n    border: 1px solid black;\n    top: 25px;\n    padding: 0px;\n    z-index: 1;\n}\n\n.projectMenuImg {\n    pointer-events: none;\n}\n\n.projectMenuChildren {\n    display: flex;\n    padding-left: 0.5rem;\n    padding-right: 0.5rem;\n    padding-top: 0px;\n    padding-bottom: 0px;\n    justify-content: space-between;\n    \n  \n}\n\n.projectMenuChildren > * {\n    pointer-events: none;\n}\n\n.projectMenuChildren:hover {\n    background-color: white;\n}\n\n.projectMenuChildrenImg {\n    align-self: center;\n}\n\n\n\n.projectsContent {\n    display: flex;\n    border: 2px solid black;\n    padding: 0.3rem;\n    gap: 0.5rem;\n    margin: 0.5rem;   \n\n}\n.projectsContent > * {\n    pointer-events: none;\n}\n\n.projects h2 {\n    margin: 1rem;\n    /* border: 1px solid red; */\n\n\n}\n\n.taskView {\n    grid-column-start: 2;\n    grid-column-end: 3;\n    grid-row-start: 2;\n    grid-row-end: 3;\n    background-color: #f2f0f0;\n    display: flex;\n    flex-direction: column;\n    gap: 2rem;\n    padding-top: 1rem;\n    padding-left: 2rem;\n}\n\n.tasks {\n    display: flex;\n    flex-direction: column;\n    gap: 1rem;\n\n}\n\n.task {\n    display: grid;\n    grid-template-columns: 50px 1fr;\n\n}\n\n\n.taskComplete {\n    grid-column-start: 1;\n    grid-column-end: 2;\n    grid-row-start: 1;\n    grid-row-end: 2;\n    position: relative;\n    /* background-color: yellow;\n    border: 2px solid red; */\n}\n\n.dot {\n    height: 20px;\n    width: 20px;\n    background-color: none;\n    border-radius: 50%;\n    border: 2px solid black;\n    display: inline-block;\n    position: absolute;\n    top: 15%;\n    left: 12.5px;\n   \n}\n\n.taskContent {\n    grid-column-start: 2;\n    grid-column-end: 3;\n\n    display: grid;\n    grid-template-columns:  3fr 1fr;\n    grid-template-rows: 50px 1fr;\n    border-bottom: grey solid 1px;\n}\n\n\n\n.task:hover {\n    background-color: pink;\n\n}\n\n\n\n.taskTitle {\n    grid-column-start: 1;\n    grid-column-end: 2;\n    grid-row-start: 1;\n    grid-row-end: 2;\n    pointer-events: none;\n\n}\n\n.taskDueDate {\n    grid-column-start: 2;\n    grid-column-end: 3;\n    grid-row-start: 1;\n    grid-row-end: 2;\n    pointer-events: none;\n\n}\n\n.taskDescription {\n    grid-column-start: 1;\n    grid-column-end: 3;\n    grid-row-start: 2;\n    grid-row-end: 3;\n    pointer-events: none;\n}\n\n\n.addTask {\n    height: 2rem;\n    display: flex;\n    align-items: center;\n\n}\n\n.addTask:hover {\n    background-color:#696868 ;\n\n}\n\n\n\n\n#addProjectForm {\n    display: none;\n    height:300px;\n    width:300px;\n    position:absolute;\n    top: 20%;\n    left: 50%;\n    margin-left: -150px;\n    background-color: #c9c8c7;\n\n}\n\n.addProjectFormUser {\n    display: flex;\n    flex-direction: column;\n\n}\n\n.addProjectFormUserHeading h2 {\n\n\n}\n\n\n.addProjectFormUserHeading {\n    background-color:#696868;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    height: 3rem;\n    \n}\n\n.addProjectFormUserBody {\n    display: flex;\n    flex-direction: column;\n}\n\n.addProjectFormUserLiTitle {\n    display: flex;\n    flex-direction: column;\n\n}\n\n.addProjectFormUserButtons {\n    margin-top: 100px;\n    align-self: flex-end;\n}\n\n#addTaskForm {\n    display: none;\n    height:500px;\n    width:500px;\n    position:absolute;\n    top: 20%;\n    left: 50%;\n    margin-left: -250px;\n    background-color: #c9c8c7;\n\n}\n\n.addTaskFormUser {\n    display: flex;\n    flex-direction: column;\n\n}\n\n.addTaskFormUserHeading {\n    background-color:#696868;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    height: 3rem;\n    \n}\n\n.addTaskFormUserBody {\n    display: flex;\n    flex-direction: column;\n}\n\n.addTaskFormUserLi {\n    display: flex;\n    flex-direction: column;\n\n}\n\n.addTaskFormUserUl input {\n    background-color: white;\n    border: none;\n    \n}\n\n.addTaskFormUserButtons {\n    \n\n}\n\n\n.flagImgPNG1 {\n    background-color: red;\n}\n.flagImgPNG2 {\n    background-color: orange;\n}\n\n.flagImgPNG3 {\n    background-color: skyblue;\n}\n\n.activePriority {\n    width: 2.5rem;\n    height: 2.5rem;\n\n}\n\n/* .addProjectFormUserHeadingHTwo {\n    text-align: center;\n} */\n\nfooter {\n    background-color: red;\n    grid-row-start: 3;\n    grid-row-end: 4;\n    grid-column-start: 1;\n    grid-column-end: 3;\n}\n\n\n/*\nbackground-color: #ebe7e4;\n*/\n"],sourceRoot:""}]);const d=i},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",r=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),r&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),r&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,r,o,a){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(r)for(var d=0;d<this.length;d++){var s=this[d][0];null!=s&&(i[s]=!0)}for(var c=0;c<n.length;c++){var l=[].concat(n[c]);r&&i[l[0]]||(void 0!==a&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=a),t&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=t):l[2]=t),o&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=o):l[4]="".concat(o)),e.push(l))}},e}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */"),i=t.sources.map((function(n){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(n," */")}));return[e].concat(i).concat([a]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,r=0;r<e.length;r++)if(e[r].identifier===n){t=r;break}return t}function r(n,r){for(var a={},i=[],d=0;d<n.length;d++){var s=n[d],c=r.base?s[0]+r.base:s[0],l=a[c]||0,u="".concat(c," ").concat(l);a[c]=l+1;var A=t(u),m={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==A)e[A].references++,e[A].updater(m);else{var p=o(m,r);r.byIndex=d,e.splice(d,0,{identifier:u,updater:p,references:1})}i.push(u)}return i}function o(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,o){var a=r(n=n||[],o=o||{});return function(n){n=n||[];for(var i=0;i<a.length;i++){var d=t(a[i]);e[d].references--}for(var s=r(n,o),c=0;c<a.length;c++){var l=t(a[c]);0===e[l].references&&(e[l].updater(),e.splice(l,1))}a=s}}},569:n=>{var e={};n.exports=function(n,t){var r=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(r,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function t(r){var o=e[r];if(void 0!==o)return o.exports;var a=e[r]={id:r,exports:{}};return n[r](a,a.exports,t),a.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),(()=>{var n;t.g.importScripts&&(n=t.g.location+"");var e=t.g.document;if(!n&&e&&(e.currentScript&&(n=e.currentScript.src),!n)){var r=e.getElementsByTagName("script");r.length&&(n=r[r.length-1].src)}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=n})(),t.nc=void 0,(()=>{var n=t(379),e=t.n(n),r=t(795),o=t.n(r),a=t(569),i=t.n(a),d=t(565),s=t.n(d),c=t(216),l=t.n(c),u=t(589),A=t.n(u),m=t(426),p={};function g(n){if(null===n||!0===n||!1===n)return NaN;var e=Number(n);return isNaN(e)?e:e<0?Math.ceil(e):Math.floor(e)}function h(n,e){if(e.length<n)throw new TypeError(n+" argument"+(n>1?"s":"")+" required, but only "+e.length+" present")}function f(n){return f="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},f(n)}function C(n){h(1,arguments);var e=Object.prototype.toString.call(n);return n instanceof Date||"object"===f(n)&&"[object Date]"===e?new Date(n.getTime()):"number"==typeof n||"[object Number]"===e?new Date(n):("string"!=typeof n&&"[object String]"!==e||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function v(n){return v="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},v(n)}function b(n){return h(1,arguments),n instanceof Date||"object"===v(n)&&"[object Date]"===Object.prototype.toString.call(n)}function B(n){if(h(1,arguments),!b(n)&&"number"!=typeof n)return!1;var e=C(n);return!isNaN(Number(e))}function k(n,e){h(2,arguments);var t=C(n).getTime(),r=g(e);return new Date(t+r)}function y(n,e){h(2,arguments);var t=g(e);return k(n,-t)}p.styleTagTransform=A(),p.setAttributes=s(),p.insert=i().bind(null,"head"),p.domAPI=o(),p.insertStyleElement=l(),e()(m.Z,p),m.Z&&m.Z.locals&&m.Z.locals;var I=864e5;function w(n){h(1,arguments);var e=1,t=C(n),r=t.getUTCDay(),o=(r<e?7:0)+r-e;return t.setUTCDate(t.getUTCDate()-o),t.setUTCHours(0,0,0,0),t}function x(n){h(1,arguments);var e=C(n),t=e.getUTCFullYear(),r=new Date(0);r.setUTCFullYear(t+1,0,4),r.setUTCHours(0,0,0,0);var o=w(r),a=new Date(0);a.setUTCFullYear(t,0,4),a.setUTCHours(0,0,0,0);var i=w(a);return e.getTime()>=o.getTime()?t+1:e.getTime()>=i.getTime()?t:t-1}function T(n){h(1,arguments);var e=x(n),t=new Date(0);t.setUTCFullYear(e,0,4),t.setUTCHours(0,0,0,0);var r=w(t);return r}var j=6048e5,E={};function P(){return E}function U(n,e){var t,r,o,a,i,d,s,c;h(1,arguments);var l=P(),u=g(null!==(t=null!==(r=null!==(o=null!==(a=null==e?void 0:e.weekStartsOn)&&void 0!==a?a:null==e||null===(i=e.locale)||void 0===i||null===(d=i.options)||void 0===d?void 0:d.weekStartsOn)&&void 0!==o?o:l.weekStartsOn)&&void 0!==r?r:null===(s=l.locale)||void 0===s||null===(c=s.options)||void 0===c?void 0:c.weekStartsOn)&&void 0!==t?t:0);if(!(u>=0&&u<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var A=C(n),m=A.getUTCDay(),p=(m<u?7:0)+m-u;return A.setUTCDate(A.getUTCDate()-p),A.setUTCHours(0,0,0,0),A}function M(n,e){var t,r,o,a,i,d,s,c;h(1,arguments);var l=C(n),u=l.getUTCFullYear(),A=P(),m=g(null!==(t=null!==(r=null!==(o=null!==(a=null==e?void 0:e.firstWeekContainsDate)&&void 0!==a?a:null==e||null===(i=e.locale)||void 0===i||null===(d=i.options)||void 0===d?void 0:d.firstWeekContainsDate)&&void 0!==o?o:A.firstWeekContainsDate)&&void 0!==r?r:null===(s=A.locale)||void 0===s||null===(c=s.options)||void 0===c?void 0:c.firstWeekContainsDate)&&void 0!==t?t:1);if(!(m>=1&&m<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var p=new Date(0);p.setUTCFullYear(u+1,0,m),p.setUTCHours(0,0,0,0);var f=U(p,e),v=new Date(0);v.setUTCFullYear(u,0,m),v.setUTCHours(0,0,0,0);var b=U(v,e);return l.getTime()>=f.getTime()?u+1:l.getTime()>=b.getTime()?u:u-1}function S(n,e){var t,r,o,a,i,d,s,c;h(1,arguments);var l=P(),u=g(null!==(t=null!==(r=null!==(o=null!==(a=null==e?void 0:e.firstWeekContainsDate)&&void 0!==a?a:null==e||null===(i=e.locale)||void 0===i||null===(d=i.options)||void 0===d?void 0:d.firstWeekContainsDate)&&void 0!==o?o:l.firstWeekContainsDate)&&void 0!==r?r:null===(s=l.locale)||void 0===s||null===(c=s.options)||void 0===c?void 0:c.firstWeekContainsDate)&&void 0!==t?t:1),A=M(n,e),m=new Date(0);m.setUTCFullYear(A,0,u),m.setUTCHours(0,0,0,0);var p=U(m,e);return p}var D=6048e5;function L(n,e){for(var t=n<0?"-":"",r=Math.abs(n).toString();r.length<e;)r="0"+r;return t+r}const F=function(n,e){var t=n.getUTCFullYear(),r=t>0?t:1-t;return L("yy"===e?r%100:r,e.length)},N=function(n,e){var t=n.getUTCMonth();return"M"===e?String(t+1):L(t+1,2)},Y=function(n,e){return L(n.getUTCDate(),e.length)},q=function(n,e){return L(n.getUTCHours()%12||12,e.length)},W=function(n,e){return L(n.getUTCHours(),e.length)},G=function(n,e){return L(n.getUTCMinutes(),e.length)},O=function(n,e){return L(n.getUTCSeconds(),e.length)},H=function(n,e){var t=e.length,r=n.getUTCMilliseconds();return L(Math.floor(r*Math.pow(10,t-3)),e.length)};var z={G:function(n,e,t){var r=n.getUTCFullYear()>0?1:0;switch(e){case"G":case"GG":case"GGG":return t.era(r,{width:"abbreviated"});case"GGGGG":return t.era(r,{width:"narrow"});default:return t.era(r,{width:"wide"})}},y:function(n,e,t){if("yo"===e){var r=n.getUTCFullYear(),o=r>0?r:1-r;return t.ordinalNumber(o,{unit:"year"})}return F(n,e)},Y:function(n,e,t,r){var o=M(n,r),a=o>0?o:1-o;return"YY"===e?L(a%100,2):"Yo"===e?t.ordinalNumber(a,{unit:"year"}):L(a,e.length)},R:function(n,e){return L(x(n),e.length)},u:function(n,e){return L(n.getUTCFullYear(),e.length)},Q:function(n,e,t){var r=Math.ceil((n.getUTCMonth()+1)/3);switch(e){case"Q":return String(r);case"QQ":return L(r,2);case"Qo":return t.ordinalNumber(r,{unit:"quarter"});case"QQQ":return t.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return t.quarter(r,{width:"narrow",context:"formatting"});default:return t.quarter(r,{width:"wide",context:"formatting"})}},q:function(n,e,t){var r=Math.ceil((n.getUTCMonth()+1)/3);switch(e){case"q":return String(r);case"qq":return L(r,2);case"qo":return t.ordinalNumber(r,{unit:"quarter"});case"qqq":return t.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return t.quarter(r,{width:"narrow",context:"standalone"});default:return t.quarter(r,{width:"wide",context:"standalone"})}},M:function(n,e,t){var r=n.getUTCMonth();switch(e){case"M":case"MM":return N(n,e);case"Mo":return t.ordinalNumber(r+1,{unit:"month"});case"MMM":return t.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return t.month(r,{width:"narrow",context:"formatting"});default:return t.month(r,{width:"wide",context:"formatting"})}},L:function(n,e,t){var r=n.getUTCMonth();switch(e){case"L":return String(r+1);case"LL":return L(r+1,2);case"Lo":return t.ordinalNumber(r+1,{unit:"month"});case"LLL":return t.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return t.month(r,{width:"narrow",context:"standalone"});default:return t.month(r,{width:"wide",context:"standalone"})}},w:function(n,e,t,r){var o=function(n,e){h(1,arguments);var t=C(n),r=U(t,e).getTime()-S(t,e).getTime();return Math.round(r/D)+1}(n,r);return"wo"===e?t.ordinalNumber(o,{unit:"week"}):L(o,e.length)},I:function(n,e,t){var r=function(n){h(1,arguments);var e=C(n),t=w(e).getTime()-T(e).getTime();return Math.round(t/j)+1}(n);return"Io"===e?t.ordinalNumber(r,{unit:"week"}):L(r,e.length)},d:function(n,e,t){return"do"===e?t.ordinalNumber(n.getUTCDate(),{unit:"date"}):Y(n,e)},D:function(n,e,t){var r=function(n){h(1,arguments);var e=C(n),t=e.getTime();e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0);var r=e.getTime(),o=t-r;return Math.floor(o/I)+1}(n);return"Do"===e?t.ordinalNumber(r,{unit:"dayOfYear"}):L(r,e.length)},E:function(n,e,t){var r=n.getUTCDay();switch(e){case"E":case"EE":case"EEE":return t.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return t.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return t.day(r,{width:"short",context:"formatting"});default:return t.day(r,{width:"wide",context:"formatting"})}},e:function(n,e,t,r){var o=n.getUTCDay(),a=(o-r.weekStartsOn+8)%7||7;switch(e){case"e":return String(a);case"ee":return L(a,2);case"eo":return t.ordinalNumber(a,{unit:"day"});case"eee":return t.day(o,{width:"abbreviated",context:"formatting"});case"eeeee":return t.day(o,{width:"narrow",context:"formatting"});case"eeeeee":return t.day(o,{width:"short",context:"formatting"});default:return t.day(o,{width:"wide",context:"formatting"})}},c:function(n,e,t,r){var o=n.getUTCDay(),a=(o-r.weekStartsOn+8)%7||7;switch(e){case"c":return String(a);case"cc":return L(a,e.length);case"co":return t.ordinalNumber(a,{unit:"day"});case"ccc":return t.day(o,{width:"abbreviated",context:"standalone"});case"ccccc":return t.day(o,{width:"narrow",context:"standalone"});case"cccccc":return t.day(o,{width:"short",context:"standalone"});default:return t.day(o,{width:"wide",context:"standalone"})}},i:function(n,e,t){var r=n.getUTCDay(),o=0===r?7:r;switch(e){case"i":return String(o);case"ii":return L(o,e.length);case"io":return t.ordinalNumber(o,{unit:"day"});case"iii":return t.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return t.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return t.day(r,{width:"short",context:"formatting"});default:return t.day(r,{width:"wide",context:"formatting"})}},a:function(n,e,t){var r=n.getUTCHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return t.dayPeriod(r,{width:"narrow",context:"formatting"});default:return t.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(n,e,t){var r,o=n.getUTCHours();switch(r=12===o?"noon":0===o?"midnight":o/12>=1?"pm":"am",e){case"b":case"bb":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return t.dayPeriod(r,{width:"narrow",context:"formatting"});default:return t.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(n,e,t){var r,o=n.getUTCHours();switch(r=o>=17?"evening":o>=12?"afternoon":o>=4?"morning":"night",e){case"B":case"BB":case"BBB":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return t.dayPeriod(r,{width:"narrow",context:"formatting"});default:return t.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(n,e,t){if("ho"===e){var r=n.getUTCHours()%12;return 0===r&&(r=12),t.ordinalNumber(r,{unit:"hour"})}return q(n,e)},H:function(n,e,t){return"Ho"===e?t.ordinalNumber(n.getUTCHours(),{unit:"hour"}):W(n,e)},K:function(n,e,t){var r=n.getUTCHours()%12;return"Ko"===e?t.ordinalNumber(r,{unit:"hour"}):L(r,e.length)},k:function(n,e,t){var r=n.getUTCHours();return 0===r&&(r=24),"ko"===e?t.ordinalNumber(r,{unit:"hour"}):L(r,e.length)},m:function(n,e,t){return"mo"===e?t.ordinalNumber(n.getUTCMinutes(),{unit:"minute"}):G(n,e)},s:function(n,e,t){return"so"===e?t.ordinalNumber(n.getUTCSeconds(),{unit:"second"}):O(n,e)},S:function(n,e){return H(n,e)},X:function(n,e,t,r){var o=(r._originalDate||n).getTimezoneOffset();if(0===o)return"Z";switch(e){case"X":return Q(o);case"XXXX":case"XX":return X(o);default:return X(o,":")}},x:function(n,e,t,r){var o=(r._originalDate||n).getTimezoneOffset();switch(e){case"x":return Q(o);case"xxxx":case"xx":return X(o);default:return X(o,":")}},O:function(n,e,t,r){var o=(r._originalDate||n).getTimezoneOffset();switch(e){case"O":case"OO":case"OOO":return"GMT"+R(o,":");default:return"GMT"+X(o,":")}},z:function(n,e,t,r){var o=(r._originalDate||n).getTimezoneOffset();switch(e){case"z":case"zz":case"zzz":return"GMT"+R(o,":");default:return"GMT"+X(o,":")}},t:function(n,e,t,r){var o=r._originalDate||n;return L(Math.floor(o.getTime()/1e3),e.length)},T:function(n,e,t,r){return L((r._originalDate||n).getTime(),e.length)}};function R(n,e){var t=n>0?"-":"+",r=Math.abs(n),o=Math.floor(r/60),a=r%60;if(0===a)return t+String(o);var i=e||"";return t+String(o)+i+L(a,2)}function Q(n,e){return n%60==0?(n>0?"-":"+")+L(Math.abs(n)/60,2):X(n,e)}function X(n,e){var t=e||"",r=n>0?"-":"+",o=Math.abs(n);return r+L(Math.floor(o/60),2)+t+L(o%60,2)}const _=z;var $=function(n,e){switch(n){case"P":return e.date({width:"short"});case"PP":return e.date({width:"medium"});case"PPP":return e.date({width:"long"});default:return e.date({width:"full"})}},Z=function(n,e){switch(n){case"p":return e.time({width:"short"});case"pp":return e.time({width:"medium"});case"ppp":return e.time({width:"long"});default:return e.time({width:"full"})}};const J={p:Z,P:function(n,e){var t,r=n.match(/(P+)(p+)?/)||[],o=r[1],a=r[2];if(!a)return $(n,e);switch(o){case"P":t=e.dateTime({width:"short"});break;case"PP":t=e.dateTime({width:"medium"});break;case"PPP":t=e.dateTime({width:"long"});break;default:t=e.dateTime({width:"full"})}return t.replace("{{date}}",$(o,e)).replace("{{time}}",Z(a,e))}};function V(n){var e=new Date(Date.UTC(n.getFullYear(),n.getMonth(),n.getDate(),n.getHours(),n.getMinutes(),n.getSeconds(),n.getMilliseconds()));return e.setUTCFullYear(n.getFullYear()),n.getTime()-e.getTime()}var K=["D","DD"],nn=["YY","YYYY"];function en(n){return-1!==K.indexOf(n)}function tn(n){return-1!==nn.indexOf(n)}function rn(n,e,t){if("YYYY"===n)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(e,"`) for formatting years to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("YY"===n)throw new RangeError("Use `yy` instead of `YY` (in `".concat(e,"`) for formatting years to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("D"===n)throw new RangeError("Use `d` instead of `D` (in `".concat(e,"`) for formatting days of the month to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("DD"===n)throw new RangeError("Use `dd` instead of `DD` (in `".concat(e,"`) for formatting days of the month to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"))}var on={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function an(n){return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.width?String(e.width):n.defaultWidth,r=n.formats[t]||n.formats[n.defaultWidth];return r}}const dn={date:an({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:an({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:an({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};var sn={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function cn(n){return function(e,t){var r;if("formatting"===(null!=t&&t.context?String(t.context):"standalone")&&n.formattingValues){var o=n.defaultFormattingWidth||n.defaultWidth,a=null!=t&&t.width?String(t.width):o;r=n.formattingValues[a]||n.formattingValues[o]}else{var i=n.defaultWidth,d=null!=t&&t.width?String(t.width):n.defaultWidth;r=n.values[d]||n.values[i]}return r[n.argumentCallback?n.argumentCallback(e):e]}}const ln={ordinalNumber:function(n,e){var t=Number(n),r=t%100;if(r>20||r<10)switch(r%10){case 1:return t+"st";case 2:return t+"nd";case 3:return t+"rd"}return t+"th"},era:cn({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:cn({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(n){return n-1}}),month:cn({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:cn({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:cn({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function un(n){return function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=t.width,o=r&&n.matchPatterns[r]||n.matchPatterns[n.defaultMatchWidth],a=e.match(o);if(!a)return null;var i,d=a[0],s=r&&n.parsePatterns[r]||n.parsePatterns[n.defaultParseWidth],c=Array.isArray(s)?mn(s,(function(n){return n.test(d)})):An(s,(function(n){return n.test(d)}));i=n.valueCallback?n.valueCallback(c):c,i=t.valueCallback?t.valueCallback(i):i;var l=e.slice(d.length);return{value:i,rest:l}}}function An(n,e){for(var t in n)if(n.hasOwnProperty(t)&&e(n[t]))return t}function mn(n,e){for(var t=0;t<n.length;t++)if(e(n[t]))return t}var pn,gn={ordinalNumber:(pn={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(n){return parseInt(n,10)}},function(n){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},t=n.match(pn.matchPattern);if(!t)return null;var r=t[0],o=n.match(pn.parsePattern);if(!o)return null;var a=pn.valueCallback?pn.valueCallback(o[0]):o[0];a=e.valueCallback?e.valueCallback(a):a;var i=n.slice(r.length);return{value:a,rest:i}}),era:un({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:un({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(n){return n+1}}),month:un({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:un({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:un({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};const hn={code:"en-US",formatDistance:function(n,e,t){var r,o=on[n];return r="string"==typeof o?o:1===e?o.one:o.other.replace("{{count}}",e.toString()),null!=t&&t.addSuffix?t.comparison&&t.comparison>0?"in "+r:r+" ago":r},formatLong:dn,formatRelative:function(n,e,t,r){return sn[n]},localize:ln,match:gn,options:{weekStartsOn:0,firstWeekContainsDate:1}};var fn=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,Cn=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,vn=/^'([^]*?)'?$/,bn=/''/g,Bn=/[a-zA-Z]/;function kn(n,e,t){var r,o,a,i,d,s,c,l,u,A,m,p,f,v,b,k,I,w;h(2,arguments);var x=String(e),T=P(),j=null!==(r=null!==(o=null==t?void 0:t.locale)&&void 0!==o?o:T.locale)&&void 0!==r?r:hn,E=g(null!==(a=null!==(i=null!==(d=null!==(s=null==t?void 0:t.firstWeekContainsDate)&&void 0!==s?s:null==t||null===(c=t.locale)||void 0===c||null===(l=c.options)||void 0===l?void 0:l.firstWeekContainsDate)&&void 0!==d?d:T.firstWeekContainsDate)&&void 0!==i?i:null===(u=T.locale)||void 0===u||null===(A=u.options)||void 0===A?void 0:A.firstWeekContainsDate)&&void 0!==a?a:1);if(!(E>=1&&E<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var U=g(null!==(m=null!==(p=null!==(f=null!==(v=null==t?void 0:t.weekStartsOn)&&void 0!==v?v:null==t||null===(b=t.locale)||void 0===b||null===(k=b.options)||void 0===k?void 0:k.weekStartsOn)&&void 0!==f?f:T.weekStartsOn)&&void 0!==p?p:null===(I=T.locale)||void 0===I||null===(w=I.options)||void 0===w?void 0:w.weekStartsOn)&&void 0!==m?m:0);if(!(U>=0&&U<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!j.localize)throw new RangeError("locale must contain localize property");if(!j.formatLong)throw new RangeError("locale must contain formatLong property");var M=C(n);if(!B(M))throw new RangeError("Invalid time value");var S=V(M),D=y(M,S),L={firstWeekContainsDate:E,weekStartsOn:U,locale:j,_originalDate:M},F=x.match(Cn).map((function(n){var e=n[0];return"p"===e||"P"===e?(0,J[e])(n,j.formatLong):n})).join("").match(fn).map((function(r){if("''"===r)return"'";var o=r[0];if("'"===o)return yn(r);var a=_[o];if(a)return null!=t&&t.useAdditionalWeekYearTokens||!tn(r)||rn(r,e,String(n)),null!=t&&t.useAdditionalDayOfYearTokens||!en(r)||rn(r,e,String(n)),a(D,r,j.localize,L);if(o.match(Bn))throw new RangeError("Format string contains an unescaped latin alphabet character `"+o+"`");return r})).join("");return F}function yn(n){var e=n.match(vn);return e?e[1].replace(bn,"'"):n}const In=t.p+"f8ac04aeb3ff24b48be9.png",wn=t.p+"28d090802088aff05717.png",xn=t.p+"c5874428bc8b8ddbf14a.png",Tn=t.p+"e9af1827778de11ad1d9.png",jn=(t.p,t.p+"2546d2ce9bf2dc800b40.png"),En=t.p+"380c43f9d3647a3604cd.png",Pn=t.p+"fafba53f9f29e61319e4.png",Un=t.p+"157b93f371f462c821d7.png";function Mn(n,e){return{title:n,projectIndex:e,tasks:[]}}function Sn(n,e,t,r,o){return{title:e,dueDate:t,description:o,priority:r,taskIndex:n,getPriority:()=>r}}!function(){const n=function(){let n=function(){let n=[];n.push(Mn("inbox",0)),n.push(Mn("today",1)),n.push(Mn("upcoming",2));let e=[];return{getBoard:()=>n,addProject:(e,t)=>{n.push(Mn(e,t)),console.log("Board - addProject run. below is new board"),console.log(n)},addTask:(e,t,...r)=>{for(let o=0;o<n.length;o++)n[o].projectIndex===e&&n[o].tasks.push(Sn(t,...r));return n},editTaskInputs:(e,t,...r)=>{for(let o=0;o<n.length;o++)if(n[o].projectIndex===e){console.log("found matching project");for(let e=0;e<n[o].tasks.length;e++)if(console.log(n[o].tasks[e]),console.log(n[o].tasks[e].taskIndex),n[o].tasks[e].taskIndex===t)return console.log("found matching task!!"),void n[o].tasks.splice(e,1,Sn(t,...r))}},deleteProject:t=>{console.log("board - deleteProject is running"),console.log(`this is projectIndex ${t}`),console.log("board before delete below"),console.log(n);for(let r=0;r<n.length;r++)n[r].projectIndex===t&&e.push(n.splice(r,1));for(let e=3;e<n.length;e++)n[e].projectIndex>t&&(console.log(n[e].projectIndex),n.splice(e,1,Mn(n[e].title,e-1)));console.log("board"),console.log(n),console.log("this is now projectTrash"),console.log(e)},editProjectInputs:(e,t)=>{for(let r=0;r<n.length;r++)if(n[r].projectIndex===t)return console.log("found matching project"),void n.splice(r,1,Mn(e,t))}}}(),e=n.getBoard(),t=n.getBoard()[0],r=3,o=2;const a=()=>t.tasks,i=()=>t.projectIndex;n.addTask(i(),0,"asfed","06/05/25","p1","This is a task in your inbox. you can "),n.addTask(i(),1,"a","b","p4","e");let d="";const s=()=>d.taskIndex,c=()=>d="",l=function(n,e){h(2,arguments);var t=C(n),r=g(e);return isNaN(r)?new Date(NaN):r?(t.setDate(t.getDate()+r),t):t}(new Date,2);console.log(l);const u=kn(l,"MM/dd/yyyy");return console.log(u),{addTask:(e,t,r,a)=>{n.addTask(i(),o,e,t,r,a),o++},getBoard:()=>e,getTaskIndex:()=>taskIndex,getActiveProject:()=>t,getActiveTask:()=>d,getActiveProjectTitle:()=>t.title,getActiveProjectTasks:a,getActiveProjectIndex:i,switchActiveProject:r=>{console.log("switchActiveProject is running");for(let o=0;o<e.length;o++)n.getBoard()[o].projectIndex===r&&(console.log("switchActiveProject function - found project"),t=e[o],console.log(t))},removeActiveProject:()=>t="",removeActiveTask:c,addProject:e=>{n.addProject(e,r),r++},switchActiveTask:n=>{for(let e=0;e<a().length;e++)a()[e].taskIndex===n&&(d=a()[e],console.log("this is now activeTask = "),console.log(d))},getActiveTaskTitle:()=>d.title,getActiveTaskPriority:()=>d.priority,getActiveTaskTaskIndex:s,editTaskInputs:(e,t,r,o)=>{console.log("editTaskInputs is now running"),n.editTaskInputs(i(),s(),e,t,r,o),console.log("this is active Task now"),console.log(d),c()},deleteProject:e=>{n.deleteProject(e),r-=1,console.log(`controllerProjectIndex = ${r}`),console.log(`new global projectIndex in Controller = ${r}`)},editProjectInputs:e=>{console.log("editProjectInputs now running"),console.log(i()),n.editProjectInputs(e,i())}}}();let e;n.getActiveTask();const t=document.querySelector("body"),r=()=>{t.innerHTML="";const r=n.getBoard();let d=n.getActiveProjectTitle(),s=n.getActiveProjectIndex();const g=document.createElement("header");t.appendChild(g);const h=document.createElement("h1");h.textContent="ToDoList",g.appendChild(h);const f=document.createElement("div");f.classList.add("taskBar"),t.appendChild(f);const C=document.createElement("nav");C.classList.add("taskBarTop"),f.appendChild(C);const v=document.createElement("div");v.classList.add("taskBarContents"),v.dataset.projectTitle="inbox",v.dataset.projectIndex=0,C.appendChild(v);const B=new Image;B.src=In,B.dataset.projectTitle="inbox",v.appendChild(B);const k=document.createElement("h3");k.textContent="Inbox",k.dataset.projectTitle="inbox",v.appendChild(k);const y=document.createElement("div");y.classList.add("taskBarContents"),y.dataset.projectTitle="today",y.dataset.projectIndex=1,C.appendChild(y);const I=new Image;I.src=wn,I.classList.add("todayImgPNG"),y.appendChild(I);const w=document.createElement("h3");w.textContent="Today",y.appendChild(w);const x=document.createElement("div");x.classList.add("taskBarContents"),x.dataset.projectTitle="upcoming",x.dataset.projectIndex=2,C.appendChild(x);const T=new Image;T.src=xn,T.classList.add("upcomingImgPNG"),x.appendChild(T);const j=document.createElement("h3");j.textContent="Upcoming",x.appendChild(j);const E=document.createElement("div");E.classList.add("projects"),f.appendChild(E);const P=document.createElement("h2");P.textContent="Projects",E.appendChild(P);const U=document.createElement("nav");E.appendChild(U);for(let n=3;n<r.length;n++){const e=document.createElement("div");e.classList.add("projectsNavProject"),U.appendChild(e);const t=document.createElement("div");t.classList.add("taskBarContents"),t.dataset.projectTitle=`${r[n].title}`,t.dataset.projectIndex=n,e.appendChild(t);const o=document.createElement("h3");o.textContent=`${r[n].title}`,t.appendChild(o);const a=document.createElement("div");a.classList.add("projectsNavProjectEdit"),a.dataset.projectIndex=n,a.addEventListener("click",b),e.appendChild(a);const i=new Image;i.src=En,i.classList.add("projectMenuImg"),a.appendChild(i)}const M=document.createElement("div");M.classList.add("projectsContent"),U.appendChild(M);const S=new Image;S.src=Tn,M.appendChild(S);const D=document.createElement("h3");D.textContent="Add Project",M.appendChild(D),M.addEventListener("click",a);const L=document.createElement("div");L.classList.add("taskView"),t.appendChild(L);const F=document.createElement("h2");F.classList.add("activeProjectHeading"),F.textContent=d,L.appendChild(F);const N=document.createElement("nav");N.classList.add("tasks"),L.appendChild(N),n.getActiveProjectTasks().forEach((n=>{const e=document.createElement("div");e.classList.add("task"),N.appendChild(e);const t=document.createElement("div");t.classList.add("taskComplete"),e.appendChild(t);const r=document.createElement("span");r.classList.add("dot"),t.appendChild(r),"p1"===n.getPriority()?r.style.border="3px solid red":"p2"===n.getPriority()?r.style.border="3px solid orange":"p3"===n.getPriority()?r.style.border="3px solid skyblue":"p4"===n.getPriority()&&(r.style.border="2px solid black");const o=document.createElement("div");o.classList.add("taskContent"),o.dataset.taskIndex=n.taskIndex,o.addEventListener("click",p),e.appendChild(o);const a=document.createElement("h3");a.classList.add("taskTitle"),a.textContent=n.title,o.appendChild(a);const i=document.createElement("div");i.classList.add("taskDueDate"),i.textContent=n.dueDate,o.appendChild(i),o.dataset.priority=n.priority;const d=document.createElement("p");d.classList.add("taskDescription"),d.textContent=n.description,o.appendChild(d)}));const Y=document.createElement("div");Y.classList.add("addTask"),Y.textContent="+ Add Task",N.appendChild(Y),Y.addEventListener("click",l);const q=document.createElement("footer");t.appendChild(q);const W=document.createElement("h3");W.textContent="this is a footer",q.appendChild(W);const G=document.createElement("div");G.id="addProjectForm",t.appendChild(G);const O=document.createElement("form");O.classList.add("addProjectFormUser"),G.appendChild(O);const H=document.createElement("div");H.classList.add("addProjectFormUserHeading"),O.appendChild(H);const z=document.createElement("h2");z.textContent="Add Project",H.appendChild(z);const R=document.createElement("div");R.classList.add("addProjectFormUserBody"),O.appendChild(R);const Q=document.createElement("ul");Q.classList.add("addProjectFormUserUl"),R.appendChild(Q);const X=document.createElement("li");X.classList.add("addProjectFormUserLiTitle"),Q.appendChild(X);const _=document.createElement("label");_.setAttribute("for","projectTitle"),_.textContent="Project Title ",X.appendChild(_);const $=document.createElement("input");$.classList.add("addProjectFormTitleInput"),$.setAttribute("type","text"),$.setAttribute("id","projectTitle"),X.appendChild($);const Z=document.createElement("div");Z.classList.add("addProjectFormUserButtons"),G.appendChild(Z);const J=document.createElement("button");J.textContent="Cancel",Z.appendChild(J),J.addEventListener("click",i);const V=document.createElement("button");V.textContent="Add",Z.appendChild(V),V.addEventListener("click",c);const K=document.createElement("div");K.id="addTaskForm",t.appendChild(K);const nn=document.createElement("form");nn.classList.add("addTaskFormUser"),K.appendChild(nn);const en=document.createElement("div");en.classList.add("addTaskFormUserHeading"),nn.appendChild(en);const tn=document.createElement("h2");tn.textContent="Task Info",en.appendChild(tn);const rn=document.createElement("div");rn.classList.add("addTaskFormUserBody"),nn.appendChild(rn);const on=document.createElement("ul");on.classList.add("addTaskFormUserUl"),rn.appendChild(on);const an=document.createElement("li");an.classList.add("addTaskFormUserLi"),on.appendChild(an);const dn=document.createElement("label");dn.setAttribute("for","taskTitle"),dn.textContent="Task Title ",an.appendChild(dn);const sn=document.createElement("input");sn.classList.add("addTaskFormInput"),sn.classList.add("addTaskFormTitleInput"),sn.setAttribute("type","text"),sn.setAttribute("id","taskTitle"),an.appendChild(sn);const cn=document.createElement("li");cn.classList.add("addTaskFormUserLi"),on.appendChild(cn);const ln=document.createElement("label");ln.setAttribute("for","taskDescription"),ln.textContent="Task Description ",cn.appendChild(ln);const un=document.createElement("input");un.classList.add("addTaskFormInput"),un.classList.add("addTaskFormDescriptionInput"),un.setAttribute("type","text"),un.setAttribute("id","taskDescription"),cn.appendChild(un);const An=document.createElement("li");An.classList.add("addTaskFormUserLi"),on.appendChild(An);const mn=document.createElement("label");mn.setAttribute("for","taskDueDate"),mn.textContent="Task DueDate ",An.appendChild(mn);const pn=document.createElement("input");pn.classList.add("addTaskFormInput"),pn.classList.add("addTaskFormDueDateInput"),pn.setAttribute("type","text"),pn.setAttribute("id","taskDueDate"),"today"===d&&(pn.value=kn(new Date,"MM/dd/yyyy")),An.appendChild(pn);const gn=document.createElement("div");gn.classList.add("addTaskFormUserButtons"),K.appendChild(gn);const hn=document.createElement("div");hn.classList.add("addTaskFormUserPriority"),gn.appendChild(hn);const fn=document.createElement("div");hn.appendChild(fn);const Cn=document.createElement("label");Cn.textContent="Priority",fn.appendChild(Cn);const vn=document.createElement("div");hn.appendChild(vn);for(let n=1;n<5;n++){const e=new Image;e.src=jn,e.classList.add("flagImgPNG"),e.classList.add(`flagImgPNG${n}`),e.dataset.priority=`p${n}`,e.addEventListener("click",A),vn.appendChild(e)}e="p4";const bn=document.createElement("button");bn.textContent="Cancel",gn.appendChild(bn),bn.addEventListener("click",u);const Bn=document.createElement("button");Bn.textContent="Submit",gn.appendChild(Bn),Bn.addEventListener("click",m);const yn=document.querySelectorAll(".taskBarContents");yn.forEach((n=>{n.addEventListener("click",o)})),yn.forEach((n=>{Number(n.dataset.projectIndex)===s&&n.classList.add("activeProject")}))};function o(e){console.log("below is switchActiveProject target"),console.log(e.target);const t=e.target.dataset.projectIndex;console.log(`this is selectedProjectIndex:${t} `),t&&(n.switchActiveProject(Number(t)),r())}const a=function(){document.querySelector("#addProjectForm").style.display="block"};function i(){document.querySelector(".addProjectFormTitleInput").value="",document.querySelector("#addProjectForm").style.display="none",s()}let d="off";function s(){d="off"}function c(){const e=document.querySelector("#projectTitle").value;"off"===d?n.addProject(e):"on"===d&&(console.log("projectToggle is on and I'm editing project"),n.editProjectInputs(e),s()),r()}function l(){document.querySelector("#addTaskForm").style.display="block",console.log("active Task task index below"),console.log(n.getActiveTaskTaskIndex())}function u(){const e=document.querySelectorAll(".addTaskFormInput");for(let n of e)n.value="";document.querySelector("#addTaskForm").style.display="none",v(),n.removeActiveTask(),console.log("is there activeTask here?"),console.log(n.removeActiveTask())}function A(n){const t=n.target.dataset.priority;console.log("selectPriorityClick running"),t&&(e=t,v(),n.target.classList.add("activePriority"))}function m(){let t=document.querySelector(".addTaskFormTitleInput").value,o=document.querySelector(".addTaskFormDescriptionInput").value,a=document.querySelector(".addTaskFormDueDateInput").value;return n.getActiveTask()?n.getActiveTask()?(console.log("existing task has been clicked"),n.editTaskInputs(t,a,e,o),u(),void r()):void 0:(console.log("new Task being created! not existing task "),console.log(`this is priority: ${e}`),n.addTask(t,a,e,o),u(),void r())}function p(t){!function(e){const t=e.target.dataset.taskIndex;console.log(`clicked task with taskIndex of ${e.target.dataset.taskIndex}`),t&&n.switchActiveTask(Number(t))}(t),l(),document.querySelector("#taskTitle").value=n.getActiveTask().title,document.querySelector("#taskDescription").value=n.getActiveTask().description,document.querySelector("#taskDueDate").value=n.getActiveTask().dueDate,e=n.getActiveTaskPriority(),console.log("is there activeTask here?"),console.log(n.getActiveTask()),v(),document.querySelectorAll(".flagImgPNG").forEach((e=>{e.dataset.priority===n.getActiveTaskPriority()&&e.classList.add("activePriority")}))}function f(){a(),document.querySelector("#projectTitle").value=n.getActiveProjectTitle()}function v(){document.querySelectorAll(".flagImgPNG").forEach((n=>{n.classList.remove("activePriority")}))}const b=e=>{const t=e.target.dataset.projectIndex;console.log("this is projectIndex = "),console.log(t),n.switchActiveProject(t),d="on";const r=document.createElement("div");let a;r.classList.add("projectMenu"),r.style.display="inline-block";const i=document.querySelectorAll(".projectsNavProjectEdit");for(let n=0;n<i.length;n++)i[n].dataset.projectIndex===t&&(a=i[n]);a.appendChild(r);const s=document.createElement("div");s.classList.add("projectMenuChildren"),s.dataset.projectIndex=t,r.appendChild(s),s.addEventListener("click",o),s.addEventListener("click",f);const c=document.createElement("p");c.textContent="Edit Project",s.appendChild(c);const l=new Image;l.src=Un,l.classList.add("projectMenuChildrenImg"),s.appendChild(l);const u=document.createElement("div");u.classList.add("projectMenuChildren"),u.dataset.projectIndex=t,r.appendChild(u),u.addEventListener("click",B);const A=document.createElement("p");A.textContent="Delete Project",u.appendChild(A);const m=new Image;m.src=Pn,m.classList.add("projectMenuChildrenImg"),u.appendChild(m),document.addEventListener("click",(n=>{document.querySelector(".projectMenu"),n.target.closest(".projectMenu")||alert("lick my ass")}))};function B(e){const t=Number(e.target.dataset.projectIndex);console.log(`this is projectIndex from deleteProjectClick = ${t}`),n.deleteProject(t),r(),e.stopPropagation()}r(),function(n){let e;try{e=window.localStorage;const n="__storage_test__";return e.setItem(n,n),e.removeItem(n),!0}catch(n){return n instanceof DOMException&&(22===n.code||1014===n.code||"QuotaExceededError"===n.name||"NS_ERROR_DOM_QUOTA_REACHED"===n.name)&&e&&0!==e.length}}()?console.log("available"):console.log("no")}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,